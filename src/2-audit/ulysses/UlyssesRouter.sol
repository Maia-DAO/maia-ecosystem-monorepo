// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import { SafeTransferLib } from "solady/utils/SafeTransferLib.sol";
import { FixedPointMathLib } from "solady/utils/FixedPointMathLib.sol";

import { ERC20 } from "solmate/tokens/ERC20.sol";
import { ERC4626, ERC20 } from "solmate/mixins/ERC4626.sol";

import { UlyssesPool } from "./UlyssesPool.sol";
import { UlyssesFactory } from "./UlyssesFactory.sol";

import { console2 } from "forge-std/console2.sol";

/**
 * source: Figure 4 from https://www.dropbox.com/s/gf3606jedromp61/Ulysses-Solving.The.Bridging-Trilemma.pdf?dl=0
 *         Input: Transaction amount t, destination poolId ID d
 *
 *         # On the source poolId:
 *         1:  if b‚Çõ,ùíπ < t then
 *         2:      Reject the transfer
 *         3:  end if
 *         4:  a‚Çõ ‚Üê a‚Çõ + t
 *         5:  b‚Çõ,ùíπ ‚Üê b‚Çõ,ùíπ ‚àí t
 *         6:  for x != s do
 *         7:      diff‚Çõ,‚Çì ‚Üê max(0, lp‚Çõ * w‚Çõ,‚Çì ‚àí (lkb‚Çì,‚Çõ + c‚Çõ,‚Çì))
 *         8:  end for
 *         9:  Total ‚Üê ‚àë‚Çì diff‚Çõ,‚Çì
 *         10: for x != s do
 *         11:     diff‚Çõ,‚Çì ‚Üê min(Total, t) * diff‚Çõ,‚Çì / Total
 *         12: end for
 *         13: t‚Ä≤ ‚Üê t - min(Total, t)
 *         14: for ‚àÄx do
 *         15:     c‚Çõ,‚Çì ‚Üê c‚Çõ,‚Çì + diff‚Çõ,‚Çì + t‚Ä≤ * w‚Çõ,‚Çì
 *         16: end for
 *         17: msg = (t, c‚Çõ,ùíπ)
 *         18: lkbùíπ,‚Çõ ‚Üê lkbùíπ,‚Çõ + c‚Çõ,ùíπ
 *         19: c‚Çõ,ùíπ ‚Üê 0
 *         20: Send msg to poolId d
 *
 *         # On the destination poolId:
 *         21: Receive (t, c‚Çõ,ùíπ) from poolIds
 *         22: aùíπ ‚Üê aùíπ ‚àí t
 *         23: bùíπ,‚Çõ ‚Üê bùíπ,‚Çõ + c‚Çõ,ùíπ
 *         24: lkb‚Çõ,ùíπ ‚Üê lkb‚Çõ,ùíπ ‚àí t
 *
 * ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ç‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†æ‚¢ã‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚¢∞‚£ø‚†Ñ
 * ‚†Ä‚†Ä‚¢∞‚†Ä‚†Ä‚†Ç‚†î‚†Ä‚°Ç‚†ê‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚†§‚¢Ç‚£â‚†â‚†â‚†â‚†Å‚†Ä‚†â‚†Å‚°Ä‚†Ä‚†â‚†≥‚¢∂‚†∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†å‚†ô‚†ì‚†í‚†ª‚°¶‚†î‚°å‚£Ñ‚†§‚¢≤‚°Ω‚†ñ‚†™‚¢±‚†¶‚£§
 * ‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†ò‚†ã‚£†‚£æ‚£õ‚£û‚°õ‚¢∂‚£æ‚£ø‚£∂‚£¥‚£§‚£§‚£§‚£Ä‚£Ä‚¢†‚†Ç‚†Ä‚†ä‚°õ‚¢∑‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ç‚£æ‚£Å‚¢∏‚†Ä‚†Å‚†ê‚¢ä‚£±‚£∫‚°∞‚†∂‚£ö‚°≠‚†Ç
 * ‚¢Ä‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä‚¢†‚£§‚£¥‚°ü‚†á‚£∂‚£†‚¢≠‚£ø‚£ø‚£ø‚£ø‚°å‚†ô‚†ª‚†ø‚£ø‚£ø‚£ø‚£∂‚£Ñ‚°Ä‚†Ä‚†à‚£Ø‚¢ª‚°∑‚£Ñ‚†Ä‚†Ñ‚¢Ä‚°Ü‚††‚¢Ä‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†ê‚¢ì‚°Å‚†§‚†ê‚¢Å
 * ‚°º‚†Ä‚†Ä‚¢Ä‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ü‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£¶‚£†‚†§‚¢ñ‚£ø‚£ø‚£ø‚£ü‚£õ‚£ø‚°¥‚£ø‚£ø‚£ø‚£ü‚¢ø‚£ø‚£ø‚£¶‚£∞‚†â‚†ª‚¢∑‚°à‚¢≥‚°Ñ‚¢∏‚†á‚¢π‚°¶‚¢•‚¢∏‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚¢†‚†Ç
 * ‚¢°‚¢ê‚†Ä‚†Ç‚†Ä‚†Ä‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†ñ‚†ã‚¢∞‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚†ô‚†õ‚†ö‚†õ‚†Å‚†ô‚¢¶‚°â‚†â‚†â‚†Ä‚†ô‚£∑‚£≠‚£ø‚£¶‚£π‚£ø‚£ø‚£ø‚£§‚†ê‚¢Ä‚†π‚£∑‚°π‚£æ‚£ß‚¢ª‚†ê‚°Ä‚¢∏‚†Ä‚†Ä‚†Ä‚°Å‚†Ä‚†Ä‚†Ä‚†¥‚†É‚†Ä
 * ‚†Ç‚†Ä‚†Ä‚†Ä‚†à‚°ò‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†è‚†Ä‚¢∞‚£æ‚°ø‚¢ã‚£Ω‚°ø‚†ü‚†â‚†Ä‚†Ä‚¢¥‚†Ä‚†ô‚£Ü‚†Ä‚†≥‚°Ñ‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£Ü‚¢π‚£ø‚¢ø‚£ø‚£ø‚£ø‚£Ü‚£Ç‚†Ä‚¢ø‚°á‚†ò‚¢ø‚£ø‚£∑‚°Ö‚£º‚¢∏‚°á‚¢∏‚°á‚†Ä‚°Ä‚£∞‚†Å‚†Ä‚†Ä
 * ‚†∏‚†ê‚†Å‚¢†‚†£‚†Å‚†Å‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚°è‚°Ñ‚£∞‚£ø‚£ø‚£∑‚£æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ä‚†Ä‚†ò‚£á‚†Ä‚†ô‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£é‚†ª‚£æ‚£ø‚£æ‚£ø‚£ø‚£ø‚†Å‚£∏‚£∑‚£Ä‚†à‚¢ø‚£ø‚†á‚°ø‚¢∏‚°á‚¢∏‚†Ä‚†Ä‚£∑‚†Å‚†Ä‚†Ä‚†Ä
 * ‚†Ç‚†Ä‚†Ä‚°é‚†Ñ‚†Ä‚£†‚£§‚£æ‚£ª‚£ø‚°ü‚†Ä‚¢ò‚£ø‚£ø‚£ø‚°ø‚†É‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚¢à‚°á‚†Ä‚†Ä‚†∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚°Ñ‚†Ä‚¢à‚£ø‚†ø‚£ø‚£ø‚°ø‚†Ø‚£ø‚°Ω‚°Ü‚†∏‚£ø‚£Ä‚°á‚¢∏‚°á‚¢∏‚°Ä‚†Ä‚°ü‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚°à‚†Ä‚°∏‚†º‚†ê‚†å‚¢°‚†π‚°ç‚£∑‚£ø‚£Å‚†∞‚£æ‚£ø‚¢ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚†Å‚†Ä‚†Ä‚†Ä‚¢∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∑‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£õ‚£ø‚£ø‚°á‚†Ä‚¢ª‚£ª‚°á‚£º‚°á‚£π‚†ä‚†Ä‚£ß‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚†Ä‚¢ê‚°£‚¢ë‚£®‚†∂‚†û‚†Ä‚†É‚£ã‚£Ω‚£ü‚°ò‚£ø‚£ø‚£∫‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°á‚†ê‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚°Ü‚°Ñ‚†à‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£ú‚†Ä‚†Ä‚°á‚¢ß‚£ø‚°á‚£ø‚°Ñ‚¢Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚†®‚£•‚°∂‚†å‚£°‚†°‚°ñ‚†Ä‚†à‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£á‚¢∑‚†Ä‚†Ä‚†Ä‚¢º‚£ø‚£ø‚£ç‚°ü‚†ª‚£∑‚£Ñ‚¢ª‚°à‚£ø‚†Å‚£ø‚°á‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚†ã‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚¢©‚°è‚¢º‚£Ω‚£ø‚£ø‚£ø‚£ø‚¢∑‚°Ñ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†∏‚°Ñ‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£Ñ‚†ô‚£ø‚£æ‚°á‚†∏‚°Ü‚£ø‚†Å‚¢∏‚£ø‚£á‚†Ä‚†Ä‚†Ä
 * ‚†Ä‚†Ä‚††‚¢Ä‚£™‚£§‚°å‚†â‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£®‚°ü‚¢£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£≥‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚†Ä‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ü‚°á‚†Ä‚†Ä‚¢∏‚£æ‚£ø‚£ø‚£ø‚£ø‚£∑‚£º‚£ø‚°á‚†Ä‚¢π‚£ø‚°Ö‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä
 * ‚£§‚£µ‚£æ‚£ø‚£ø‚£ø‚£ø‚†Ç‚†ù‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚†Ä‚°ø‚¢£‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚¢ª‚¢ø‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚¢ø‚¢π‚¢ø‚£ø‚°Ö‚¢π‚†Ä‚†Ä‚¢ø‚°Ü‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚°Ü‚†Ä‚†Ä‚†Ä‚£∞‚†ã‚†Ä‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£Ñ‚£ß‚£º‚£¶‚°¥‚†ö‚¢©‚†á‚†ò‚¢∫‚£¶‚°Ü‚¢â‚£ø‚£ø‚£ø‚£º‚£æ‚°à‚¢ª‚£ø‚£∏‚°Ü‚†Ä‚†ò‚°á‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä
 * ‚°ø‚¢ø‚£ü‚£Ω‚£ø‚°ø‚†ø‚†õ‚£â‚£•‚†∂‚†æ‚£ø‚£ø‚£ø‚¢ø‚†Ä‚¢≥‚°Ä‚†Ä‚¢∞‚¢ã‚°Ä‚†Ä‚¢∏‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£á‚†á‚†Ä‚£ß‚£ß‚°ê‚£ç‚£¥‚£æ‚£ø‚°á‚†Ä‚¢∏‚£ø‚£ø‚†π‚¢ø‚£Ø‚†ª‚¢ø‚£ø‚£Ñ‚£ß‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä
 * ‚£ø‚†ø‚†ü‚£ã‚°°‚†î‚†ö‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚£ß‚£ø‚£ø‚°á‚°Ü‚†ò‚£ß‚°Ñ‚†Ä‚†Ä‚†â‚†õ‚°ì‚£ø‚°é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ø‚¢ø‚£Ñ‚°Ä‚¢π‚£∂‚£ø‚†ü‚£ª‚†ø‚†ö‚£ø‚¢Ä‚£æ‚¢æ‚£ø‚°Ä‚£ø‚£ø‚†Ç‚£∫‚°á‚¢ª‚£ø‚°Ü‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£Ü
 * ‚¢∞‚†ö‚†â‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£∑‚°á‚†Ä‚¢ª‚£ø‚£¶‚£Ä‚¢Ä‚°Ä‚¢π‚£å‚£ô‚£∂‚†§‚¢Ñ‚£Ä‚†§‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∫‚°è‚°Ü‚¢ª‚£ø‚£ø‚£ø‚†Ä‚£ø‚£ß‚¢∏‚£Ø‚¢ß‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø
 * ‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚†ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚¢∏‚£∑‚°Ä‚†π‚£ø‚°ø‚£ü‚†õ‚†ª‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£∑‚°á‚†É‚†ò‚£ø‚£ø‚£ø‚†Ä‚£ø‚£ø‚¢∏‚°ü‚†ª‚°Ñ‚†Ä‚†Ä‚†ò‚£ø‚£ü‚£ü‚£ø
 * ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚†ü‚†Å‚¢∞‚£ø‚£ø‚£ø‚£ø‚°ü‚°á‚†Ä‚°ø‚¢ª‚†∂‚£Ñ‚†ª‚£Ñ‚†ë‚†∂‚†¶‚†∂‚†ö‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†à‚£º‚°á‚†Ä‚†Ä‚¢π‚£ø‚°ø‚¢¢‚£ø‚£ø‚£ø‚£ß‚¢†‚¢ß‚†Ä‚†Ä‚†Ä‚†π‚£Ø‚£è‚†Ä
 * ‚†Ä‚†Ä‚†Ä‚¢¶‚†Ä‚†Ä‚†∞‚£ø‚£∑‚£Ä‚£¥‚£ø‚°ø‚£ª‚£ø‚£ø‚°á‚¢ß‚†Ä‚°á‚†à‚£ß‚†à‚£ø‚¢∂‚°ø‚°Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚°á‚†Ä‚††‚£ø‚¢ø‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚°é‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚°•‚†Ä
 * ‚†Ä‚†Ä‚†Ä‚£º‚£á‚†Ä‚†Ä‚†à‚†õ‚¢´‚£ø‚£ø‚¢Ä‚£è‚£ø‚£ø‚°Ö‚¢∏‚£∏‚°á‚†Ä‚£ø‚°Ñ‚¢π‚†Ä‚†ô‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚£§‚°æ‚¢Ö‚°à‚†ì‚†¢‚°∂‚†ã‚¢Ä‚°æ‚†Å‚¢†‚£á‚£ø‚£ß‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£≥‚°Ä‚†Ä‚†Ä‚†Ä‚†∞‚†à
 * ‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚†ª‚£ø‚£æ‚†ü‚£ø‚£ü‚†Ä‚†∏‚¢É‚†á‚¢∞‚£ø‚£á‚†ò‚†Ä‚†Ä‚¢ª‚£ø‚£∑‚£∂‚£§‚£§‚£Ä‚£†‚†û‚†≠‚†§‚†Ñ‚†ô‚†ø‚¢ª‚£•‚£¥‚£ø‚†É‚†Ä‚£æ‚£æ‚£ø‚£Ø‚£ø‚£ø‚£ø‚£æ‚£ü‚£ø‚£ø‚£ø‚£ø‚°ø‚°Ñ‚†Ä‚†Ä‚†Ä‚¢£
 * ‚†Ä‚†Ä‚†Ä‚†ª‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ü‚¢†‚£ø‚£ø‚†Ä‚†Ä‚¢∏‚†Ä‚£º‚£ø‚£ø‚†Ü‚†Ä‚†Ä‚¢∏‚°ü‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚£Ä‚£§‚°ñ‚†Ç‚£¥‚£ø‚£Ø‚£ø‚†ã‚†Ä‚†ê‚°ø‚£π‚£æ‚†ã‚†ó‚£Ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä
 * ‚†Ä‚†Ä‚°Ç‚¢∏‚£ø‚£ø‚£ø‚£∑‚°Ä‚¢Ä‚£ø‚£ø‚£ø‚£æ‚°ø‚£ø‚†Ä‚†Ä‚°ú‚¢∏‚£ø‚£ì‚£æ‚£∑‚†Ä‚†Ä‚¢∏‚£ø‚£ú‚£ø‚£Ø‚°ü‚†Ä‚†Ä‚†Ä‚£Ä‚£à‚†ô‚¢∂‚£ø‚£ø‚£ø‚†á‚†Ä‚¢Ä‚£º‚£á‚£ø‚°Ä‚¢Ä‚£§‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†∑‚°Ä‚†Ä‚†Ä
 * ‚£§‚£Ä‚°û‚£¢‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚†Å‚£ø‚°Ü‚¢†‚£ß‚£ø‚°á‚†ê‚£ø‚°ø‚†Ä‚†Ä‚¢∏‚¢∑‚£ª‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£∏‚†ë‚¢¶‚£ª‚£ø‚†è‚†Ä‚¢Ä‚£æ‚£ø‚£∏‚£ø‚£©‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†ô‚°£‚†Ä‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†ü‚†É‚£ú‚£ø‚£ø‚£ß‚£∏‚£ø‚†Å‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£¥‚°ü‚†Ä‚¢Ä‚°ø‚†É‚†Ä‚£†‚†ã‚£π‚°è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†ê‚†§‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°¶‚£ø‚°ü‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚†ì‚¢§‚£Ñ‚£§‚£¥‚£ø‚£è‚£Ä‚£†‚¢æ‚†Å‚†Ä‚°¥‚¢á‚£æ‚£ø‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢£
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚°ª‚†ã‚†ª‚†Ü‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚£æ‚£ø‚£ø‚°ø‚°á‚†à‚†í‚†¶‚†ñ‚¢ª‚°ü‚†Å‚£∞‚†É‚†à‚†Ä‚°º‚¢Å‚£º‚£ø‚°á‚£æ‚¢à‚£π‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ü‚°µ‚†Å‚†Ä‚†Ä‚†Ä‚¢†‚£≤‚†ü‚£ø‚£ø‚£ø‚£ø‚†è‚£†‚£æ‚£ø‚£ø‚£ß‚£∞‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†π‚¢æ‚†Å‚†Ä‚£ß‚°æ‚£°‚£æ‚°ü‚¢ª‚°á‚£ø‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ä‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢è‚°æ‚¢É‚£º‚†ü‚£°‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚¢è‚†Ä‚¢á‚†Ä‚†Ä‚¢∏‚£∞‚£ø‚£á‚£ó‚£æ‚£á‚¢ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä
 * ‚¢ø‚£ø‚†ø‚†ã‚£Ä‚£§‚†ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚¢è‚£†‚£û‚£µ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†Ä‚†±‚£º‚°Ü‚†Ä‚¢∏‚†π‚£ø‚°Ñ‚£æ‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†à‚¢ª‚£ø‚°Ñ‚†Ä‚†Ä
 */
contract UlyssesRouter {
    using SafeTransferLib for address;
    using FixedPointMathLib for uint256;

    error OutputTooLow();

    error UnrecognizedUlyssesLP();

    mapping(uint256 => UlyssesPool) public pools;

    UlyssesFactory public ulyssesFactory;

    struct Route {
        uint128 from;
        uint128 to;
    }

    constructor(UlyssesFactory _ulyssesFactory) {
        ulyssesFactory = _ulyssesFactory;
    }

    /*//////////////////////////////////////////////////////////////
                        Internal LOGIC
    //////////////////////////////////////////////////////////////*/

    function getUlyssesLP(uint256 id) private returns (UlyssesPool ulysses) {
        ulysses = pools[id];
        if (address(ulysses) == address(0)) {
            ulysses = ulyssesFactory.pools(id);

            if (address(ulysses) == address(0)) revert UnrecognizedUlyssesLP();

            pools[id] = ulysses;
        }
    }

    /*//////////////////////////////////////////////////////////////
                         LIQUIDITY LOGIC
    //////////////////////////////////////////////////////////////*/

    function addLiquidity(
        uint256 amount,
        uint256 minOutput,
        uint256 poolId
    ) external returns (uint256) {
        UlyssesPool ulysses = getUlyssesLP(poolId);

        amount = ulysses.deposit(amount, msg.sender);

        if (amount < minOutput) revert OutputTooLow();
        return amount;
    }

    function removeLiquidity(
        uint256 amount,
        uint256 minOutput,
        uint256 poolId
    ) external returns (uint256) {
        UlyssesPool ulysses = getUlyssesLP(poolId);

        amount = ulysses.withdraw(amount, msg.sender, msg.sender);

        if (amount < minOutput) revert OutputTooLow();
        return amount;
    }

    // TODO: Add/Remove Liquidty + Ulysses Token from/to 1 token
    // TODO: Add/Remove Liquidty + Ulysses Token from/to multiple tokens

    /*//////////////////////////////////////////////////////////////
                            SWAP LOGIC
    //////////////////////////////////////////////////////////////*/

    function swap(
        uint256 amount,
        uint256 minOutput,
        Route[] calldata routes
    ) external returns (uint256) {
        address(getUlyssesLP(routes[0].from).asset()).safeTransferFrom(
            msg.sender,
            address(this),
            amount
        );

        uint256 length = routes.length;

        for (uint256 i = 0; i < length; ) {
            amount = _swap(amount, routes[i].from, routes[i].to);

            unchecked {
                ++i;
            }
        }

        if (amount < minOutput) revert OutputTooLow();

        unchecked {
            --length;
        }

        address(getUlyssesLP(routes[length].to).asset()).safeTransfer(msg.sender, amount);

        return amount;
    }

    function _swap(
        uint256 amount,
        uint256 from,
        uint256 to
    ) private returns (uint256) {
        UlyssesPool ulyssesFrom = getUlyssesLP(from);

        address(ulyssesFrom.asset()).safeApprove(address(ulyssesFrom), amount);
        return ulyssesFrom.swapSource(amount, to);
    }
}
