// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {UlyssesPool} from "../UlyssesPool.sol";

/**
 * @title Ulysses Pool
 *  @author Maia DAO (https://github.com/Maia-DAO)
 *  @notice This contract is stableswap AMM that uses it's implemention of
 *          the Delta Algorithm to manage the LP's balances and transfers
 *          between chains.
 *  @dev NOTE: Can't remove a destination, only add new ones.
 *
 *       Input: Transaction amount t, destination chain ID d
 *
 *       # On the source LP:
 *       1: a‚Çõ ‚Üê a‚Çõ + t
 *       2: b‚Çõ,ùíπ ‚Üê b‚Çõ,ùíπ ‚àí t
 *       3: for x != s do
 *       4:     diff‚Çõ,‚Çì ‚Üê max(0, lp‚Çõ * w‚Çõ,‚Çì ‚àí lkb‚Çì,‚Çõ))
 *       5: end for
 *       6: Total ‚Üê ‚àë‚Çì diff‚Çõ,‚Çì
 *       7: for x != s do
 *       8:     diff‚Çõ,‚Çì ‚Üê min(Total, t) * diff‚Çõ,‚Çì / Total
 *       9: end for
 *       10: t‚Ä≤ ‚Üê t - min(Total, t)
 *       11: for ‚àÄx do
 *       12:     b‚Çõ,‚Çì ‚Üê b‚Çõ,‚Çì + diff‚Çõ,‚Çì + t‚Ä≤ * w‚Çõ,‚Çì
 *       13: end for
 *       14: msg = (t)
 *       15: Send msg to chain d
 *
 *       # On the destination LP:
 *       16: Receive (t) from a source LP
 *       17: if b‚Çõ,ùíπ < t then
 *       18:     Reject the transfer
 *       19: end if
 *       20: aùíπ ‚Üê aùíπ ‚àí t
 *       21: b‚Çõ,ùíπ ‚Üê b‚Çõ,ùíπ ‚àí t
 *       Adapted from: Figure 4 from:
 *        - https://www.dropbox.com/s/gf3606jedromp61/Ulysses-Solving.The.Bridging-Trilemma.pdf?dl=0
 * ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ç‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†æ‚¢ã‚£Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚¢∞‚£ø‚†Ñ
 * ‚†Ä‚†Ä‚¢∞‚†Ä‚†Ä‚†Ç‚†î‚†Ä‚°Ç‚†ê‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚†§‚¢Ç‚£â‚†â‚†â‚†â‚†Å‚†Ä‚†â‚†Å‚°Ä‚†Ä‚†â‚†≥‚¢∂‚†∂‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†å‚†ô‚†ì‚†í‚†ª‚°¶‚†î‚°å‚£Ñ‚†§‚¢≤‚°Ω‚†ñ‚†™‚¢±‚†¶‚£§
 * ‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†ò‚†ã‚£†‚£æ‚£õ‚£û‚°õ‚¢∂‚£æ‚£ø‚£∂‚£¥‚£§‚£§‚£§‚£Ä‚£Ä‚¢†‚†Ç‚†Ä‚†ä‚°õ‚¢∑‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ç‚£æ‚£Å‚¢∏‚†Ä‚†Å‚†ê‚¢ä‚£±‚£∫‚°∞‚†∂‚£ö‚°≠‚†Ç
 * ‚¢Ä‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä‚¢†‚£§‚£¥‚°ü‚†á‚£∂‚£†‚¢≠‚£ø‚£ø‚£ø‚£ø‚°å‚†ô‚†ª‚†ø‚£ø‚£ø‚£ø‚£∂‚£Ñ‚°Ä‚†Ä‚†à‚£Ø‚¢ª‚°∑‚£Ñ‚†Ä‚†Ñ‚¢Ä‚°Ü‚††‚¢Ä‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†ê‚¢ì‚°Å‚†§‚†ê‚¢Å
 * ‚°º‚†Ä‚†Ä‚¢Ä‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†Ü‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£¶‚£†‚†§‚¢ñ‚£ø‚£ø‚£ø‚£ü‚£õ‚£ø‚°¥‚£ø‚£ø‚£ø‚£ü‚¢ø‚£ø‚£ø‚£¶‚£∞‚†â‚†ª‚¢∑‚°à‚¢≥‚°Ñ‚¢∏‚†á‚¢π‚°¶‚¢•‚¢∏‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚¢†‚†Ç
 * ‚¢°‚¢ê‚†Ä‚†Ç‚†Ä‚†Ä‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†ñ‚†ã‚¢∞‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚†ô‚†õ‚†ö‚†õ‚†Å‚†ô‚¢¶‚°â‚†â‚†â‚†Ä‚†ô‚£∑‚£≠‚£ø‚£¶‚£π‚£ø‚£ø‚£ø‚£§‚†ê‚¢Ä‚†π‚£∑‚°π‚£æ‚£ß‚¢ª‚†ê‚°Ä‚¢∏‚†Ä‚†Ä‚†Ä‚°Å‚†Ä‚†Ä‚†Ä‚†¥‚†É‚†Ä
 * ‚†Ç‚†Ä‚†Ä‚†Ä‚†à‚°ò‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†è‚†Ä‚¢∞‚£æ‚°ø‚¢ã‚£Ω‚°ø‚†ü‚†â‚†Ä‚†Ä‚¢¥‚†Ä‚†ô‚£Ü‚†Ä‚†≥‚°Ñ‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£Ü‚¢π‚£ø‚¢ø‚£ø‚£ø‚£ø‚£Ü‚£Ç‚†Ä‚¢ø‚°á‚†ò‚¢ø‚£ø‚£∑‚°Ö‚£º‚¢∏‚°á‚¢∏‚°á‚†Ä‚°Ä‚£∞‚†Å‚†Ä‚†Ä
 * ‚†∏‚†ê‚†Å‚¢†‚†£‚†Å‚†Å‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚°è‚°Ñ‚£∞‚£ø‚£ø‚£∑‚£æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ä‚†Ä‚†ò‚£á‚†Ä‚†ô‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£é‚†ª‚£æ‚£ø‚£æ‚£ø‚£ø‚£ø‚†Å‚£∏‚£∑‚£Ä‚†à‚¢ø‚£ø‚†á‚°ø‚¢∏‚°á‚¢∏‚†Ä‚†Ä‚£∑‚†Å‚†Ä‚†Ä‚†Ä
 * ‚†Ç‚†Ä‚†Ä‚°é‚†Ñ‚†Ä‚£†‚£§‚£æ‚£ª‚£ø‚°ü‚†Ä‚¢ò‚£ø‚£ø‚£ø‚°ø‚†É‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚¢à‚°á‚†Ä‚†Ä‚†∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚°Ñ‚†Ä‚¢à‚£ø‚†ø‚£ø‚£ø‚°ø‚†Ø‚£ø‚°Ω‚°Ü‚†∏‚£ø‚£Ä‚°á‚¢∏‚°á‚¢∏‚°Ä‚†Ä‚°ü‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚°à‚†Ä‚°∏‚†º‚†ê‚†å‚¢°‚†π‚°ç‚£∑‚£ø‚£Å‚†∞‚£æ‚£ø‚¢ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚†Å‚†Ä‚†Ä‚†Ä‚¢∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∑‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£õ‚£ø‚£ø‚°á‚†Ä‚¢ª‚£ª‚°á‚£º‚°á‚£π‚†ä‚†Ä‚£ß‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚†Ä‚¢ê‚°£‚¢ë‚£®‚†∂‚†û‚†Ä‚†É‚£ã‚£Ω‚£ü‚°ò‚£ø‚£ø‚£∫‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°á‚†ê‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚°Ü‚°Ñ‚†à‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£ú‚†Ä‚†Ä‚°á‚¢ß‚£ø‚°á‚£ø‚°Ñ‚¢Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚†®‚£•‚°∂‚†å‚£°‚†°‚°ñ‚†Ä‚†à‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£á‚¢∑‚†Ä‚†Ä‚†Ä‚¢º‚£ø‚£ø‚£ç‚°ü‚†ª‚£∑‚£Ñ‚¢ª‚°à‚£ø‚†Å‚£ø‚°á‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚†ã‚†Å‚†Ä‚†Ä‚†Å‚†Ä‚¢©‚°è‚¢º‚£Ω‚£ø‚£ø‚£ø‚£ø‚¢∑‚°Ñ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†∏‚°Ñ‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£Ñ‚†ô‚£ø‚£æ‚°á‚†∏‚°Ü‚£ø‚†Å‚¢∏‚£ø‚£á‚†Ä‚†Ä‚†Ä
 * ‚†Ä‚†Ä‚††‚¢Ä‚£™‚£§‚°å‚†â‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£®‚°ü‚¢£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£≥‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚†Ä‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ü‚°á‚†Ä‚†Ä‚¢∏‚£æ‚£ø‚£ø‚£ø‚£ø‚£∑‚£º‚£ø‚°á‚†Ä‚¢π‚£ø‚°Ö‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä
 * ‚£§‚£µ‚£æ‚£ø‚£ø‚£ø‚£ø‚†Ç‚†ù‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚†Ä‚°ø‚¢£‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚¢ª‚¢ø‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚¢ø‚¢π‚¢ø‚£ø‚°Ö‚¢π‚†Ä‚†Ä‚¢ø‚°Ü‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚°Ü‚†Ä‚†Ä‚†Ä‚£∞‚†ã‚†Ä‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£Ñ‚£ß‚£º‚£¶‚°¥‚†ö‚¢©‚†á‚†ò‚¢∫‚£¶‚°Ü‚¢â‚£ø‚£ø‚£ø‚£º‚£æ‚°à‚¢ª‚£ø‚£∏‚°Ü‚†Ä‚†ò‚°á‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä
 * ‚°ø‚¢ø‚£ü‚£Ω‚£ø‚°ø‚†ø‚†õ‚£â‚£•‚†∂‚†æ‚£ø‚£ø‚£ø‚¢ø‚†Ä‚¢≥‚°Ä‚†Ä‚¢∞‚¢ã‚°Ä‚†Ä‚¢∏‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£á‚†á‚†Ä‚£ß‚£ß‚°ê‚£ç‚£¥‚£æ‚£ø‚°á‚†Ä‚¢∏‚£ø‚£ø‚†π‚¢ø‚£Ø‚†ª‚¢ø‚£ø‚£Ñ‚£ß‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä
 * ‚£ø‚†ø‚†ü‚£ã‚°°‚†î‚†ö‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚£ß‚£ø‚£ø‚°á‚°Ü‚†ò‚£ß‚°Ñ‚†Ä‚†Ä‚†â‚†õ‚°ì‚£ø‚°é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ø‚¢ø‚£Ñ‚°Ä‚¢π‚£∂‚£ø‚†ü‚£ª‚†ø‚†ö‚£ø‚¢Ä‚£æ‚¢æ‚£ø‚°Ä‚£ø‚£ø‚†Ç‚£∫‚°á‚¢ª‚£ø‚°Ü‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£Ü
 * ‚¢∞‚†ö‚†â‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£∑‚°á‚†Ä‚¢ª‚£ø‚£¶‚£Ä‚¢Ä‚°Ä‚¢π‚£å‚£ô‚£∂‚†§‚¢Ñ‚£Ä‚†§‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£∫‚°è‚°Ü‚¢ª‚£ø‚£ø‚£ø‚†Ä‚£ø‚£ß‚¢∏‚£Ø‚¢ß‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø
 * ‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚†ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚¢∏‚£∑‚°Ä‚†π‚£ø‚°ø‚£ü‚†õ‚†ª‚£ø‚£ø‚£∑‚£¶‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£∑‚°á‚†É‚†ò‚£ø‚£ø‚£ø‚†Ä‚£ø‚£ø‚¢∏‚°ü‚†ª‚°Ñ‚†Ä‚†Ä‚†ò‚£ø‚£ü‚£ü‚£ø
 * ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚†ü‚†Å‚¢∞‚£ø‚£ø‚£ø‚£ø‚°ü‚°á‚†Ä‚°ø‚¢ª‚†∂‚£Ñ‚†ª‚£Ñ‚†ë‚†∂‚†¶‚†∂‚†ö‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†à‚£º‚°á‚†Ä‚†Ä‚¢π‚£ø‚°ø‚¢¢‚£ø‚£ø‚£ø‚£ß‚¢†‚¢ß‚†Ä‚†Ä‚†Ä‚†π‚£Ø‚£è‚†Ä
 * ‚†Ä‚†Ä‚†Ä‚¢¶‚†Ä‚†Ä‚†∞‚£ø‚£∑‚£Ä‚£¥‚£ø‚°ø‚£ª‚£ø‚£ø‚°á‚¢ß‚†Ä‚°á‚†à‚£ß‚†à‚£ø‚¢∂‚°ø‚°Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚°á‚†Ä‚††‚£ø‚¢ø‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚°é‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚°•‚†Ä
 * ‚†Ä‚†Ä‚†Ä‚£º‚£á‚†Ä‚†Ä‚†à‚†õ‚¢´‚£ø‚£ø‚¢Ä‚£è‚£ø‚£ø‚°Ö‚¢∏‚£∏‚°á‚†Ä‚£ø‚°Ñ‚¢π‚†Ä‚†ô‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚£§‚°æ‚¢Ö‚°à‚†ì‚†¢‚°∂‚†ã‚¢Ä‚°æ‚†Å‚¢†‚£á‚£ø‚£ß‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£≥‚°Ä‚†Ä‚†Ä‚†Ä‚†∞‚†à
 * ‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†ò‚†ª‚£ø‚£æ‚†ü‚£ø‚£ü‚†Ä‚†∏‚¢É‚†á‚¢∞‚£ø‚£á‚†ò‚†Ä‚†Ä‚¢ª‚£ø‚£∑‚£∂‚£§‚£§‚£Ä‚£†‚†û‚†≠‚†§‚†Ñ‚†ô‚†ø‚¢ª‚£•‚£¥‚£ø‚†É‚†Ä‚£æ‚£æ‚£ø‚£Ø‚£ø‚£ø‚£ø‚£æ‚£ü‚£ø‚£ø‚£ø‚£ø‚°ø‚°Ñ‚†Ä‚†Ä‚†Ä‚¢£
 * ‚†Ä‚†Ä‚†Ä‚†ª‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ü‚¢†‚£ø‚£ø‚†Ä‚†Ä‚¢∏‚†Ä‚£º‚£ø‚£ø‚†Ü‚†Ä‚†Ä‚¢∏‚°ü‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚£Ä‚£§‚°ñ‚†Ç‚£¥‚£ø‚£Ø‚£ø‚†ã‚†Ä‚†ê‚°ø‚£π‚£æ‚†ã‚†ó‚£Ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä
 * ‚†Ä‚†Ä‚°Ç‚¢∏‚£ø‚£ø‚£ø‚£∑‚°Ä‚¢Ä‚£ø‚£ø‚£ø‚£æ‚°ø‚£ø‚†Ä‚†Ä‚°ú‚¢∏‚£ø‚£ì‚£æ‚£∑‚†Ä‚†Ä‚¢∏‚£ø‚£ú‚£ø‚£Ø‚°ü‚†Ä‚†Ä‚†Ä‚£Ä‚£à‚†ô‚¢∂‚£ø‚£ø‚£ø‚†á‚†Ä‚¢Ä‚£º‚£á‚£ø‚°Ä‚¢Ä‚£§‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†∑‚°Ä‚†Ä‚†Ä
 * ‚£§‚£Ä‚°û‚£¢‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚†Å‚£ø‚°Ü‚¢†‚£ß‚£ø‚°á‚†ê‚£ø‚°ø‚†Ä‚†Ä‚¢∏‚¢∑‚£ª‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚£∏‚†ë‚¢¶‚£ª‚£ø‚†è‚†Ä‚¢Ä‚£æ‚£ø‚£∏‚£ø‚£©‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†ô‚°£‚†Ä‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†ü‚†É‚£ú‚£ø‚£ø‚£ß‚£∏‚£ø‚†Å‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£¥‚°ü‚†Ä‚¢Ä‚°ø‚†É‚†Ä‚£†‚†ã‚£π‚°è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†ê‚†§‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°¶‚£ø‚°ü‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚†ì‚¢§‚£Ñ‚£§‚£¥‚£ø‚£è‚£Ä‚£†‚¢æ‚†Å‚†Ä‚°¥‚¢á‚£æ‚£ø‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢£
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚°ª‚†ã‚†ª‚†Ü‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚£æ‚£ø‚£ø‚°ø‚°á‚†à‚†í‚†¶‚†ñ‚¢ª‚°ü‚†Å‚£∞‚†É‚†à‚†Ä‚°º‚¢Å‚£º‚£ø‚°á‚£æ‚¢à‚£π‚£π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ü‚°µ‚†Å‚†Ä‚†Ä‚†Ä‚¢†‚£≤‚†ü‚£ø‚£ø‚£ø‚£ø‚†è‚£†‚£æ‚£ø‚£ø‚£ß‚£∞‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†π‚¢æ‚†Å‚†Ä‚£ß‚°æ‚£°‚£æ‚°ü‚¢ª‚°á‚£ø‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä
 * ‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ä‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢è‚°æ‚¢É‚£º‚†ü‚£°‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚¢è‚†Ä‚¢á‚†Ä‚†Ä‚¢∏‚£∞‚£ø‚£á‚£ó‚£æ‚£á‚¢ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä
 * ‚¢ø‚£ø‚†ø‚†ã‚£Ä‚£§‚†ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚¢è‚£†‚£û‚£µ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†Ä‚†±‚£º‚°Ü‚†Ä‚¢∏‚†π‚£ø‚°Ñ‚£æ‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†à‚¢ª‚£ø‚°Ñ‚†Ä‚†Ä
 */
interface IUlyssesPool {
    /**
     * @notice The bandwidth state of a Ulysses LP
     * @param bandwidth The available bandwidth for the given pool's ID
     * @param weight The weight to calculate the target bandwidth for the given pool's ID
     * @param destination The destination Ulysses LP
     */
    struct BandwidthState {
        uint248 bandwidth;
        uint8 weight;
        UlyssesPool destination;
    }

    /**
     * @notice The fees charged to incentivize rebalancing
     *  @param lambda1 The fee charged for rebalancing in upper bound (in basis points divided 2)
     *  @param lambda2 The fee charged for rebalancing in lower bound (in basis points divided 2)
     *  @param sigma1 The bandiwth upper bound to start charging the first rebalancing fees
     *  @param sigma2 The bandiwth lower bound to start charging the second rebalancing fees
     */
    struct Fees {
        uint64 lambda1;
        uint64 lambda2;
        uint64 sigma1;
        uint64 sigma2;
    }

    /*//////////////////////////////////////////////////////////////
                            VIEW FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    /**
     * @notice Gets the available bandwidth for the given pool's ID, if it doesn't have a connection it will return 0
     * @param destinationId The ID of a Ulysses LP
     * @return bandwidth The available bandwidth for the given pool's ID
     */

    function getBandwidth(uint256 destinationId) external view returns (uint256);

    /**
     * @notice Gets the bandwidth state list
     *  @return bandwidthStateList The bandwidth state list
     */
    function getBandwidthStateList() external view returns (BandwidthState[] memory);

    /**
     * @notice Calculates the amount of tokens that can be redeemed by the protocol.
     */
    function getProtocolFees() external view returns (uint256);

    /*//////////////////////////////////////////////////////////////
                            EXTERNAL FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    /**
     * @notice Sends all outstanding protocol fees to factory owner
     * @dev Anyone can call this function
     */
    function claimProtocolFees() external returns (uint256 claimed);

    /**
     * @notice Adds a new Ulysses LP with the requested weight
     * @dev Can't remove a destination, only add new ones
     * @param poolId The ID of the destination Ulysses LP to be added
     * @param weight The weight to calculate the bandwidth for the given pool's ID
     * @return index The index of bandwidthStateList of the newly added Ulysses LP
     */
    function addNewBandwidth(uint256 poolId, uint8 weight) external returns (uint256 index);

    /**
     * @notice Changes the weight of a exisiting Ulysses LP with the given ID
     * @param poolId The ID of the destination Ulysses LP to be removed
     * @param weight The new weight to calculate the bandwidth for the given pool's ID
     */
    function setWeight(uint256 poolId, uint8 weight) external;

    /**
     * @notice Sets the protocol and rebalancing fees
     * @param _fees The new fees to be set
     */
    function setFees(Fees calldata _fees) external;

    /**
     * @notice Sets the protocol fee
     * @param _protocolFee The new protocol fee to be set
     * @dev Only factory owner can call this function
     */
    function setProtocolFee(uint256 _protocolFee) external;

    /**
     * @notice Swaps from this Ulysses LP's underlying to the destination Ulysses LP's underlying.
     *       Distributes amount between bandwidths in the source, having a positive rebalancing fee
     *       Calls swapDestination of the destination Ulysses LP
     * @param amount The amount to be dsitributed to bandwidth
     * @param poolId The ID of the destination Ulysses LP
     * @return output The output amount transfered to user from the destination Ulysses LP
     */
    function swapIn(uint256 amount, uint256 poolId) external returns (uint256 output);

    /**
     * @notice Swaps from the caller (source Ulysses LP's) underlying to this Ulysses LP's underlying.
     *       Called from swapIn of the source Ulysses LP
     *       Removes amount from the source's bandwidth, having a negative rebalancing fee
     * @dev Only Ulysses LPs added as destinations can call this function
     * @param amount The amount to be removed from source's bandwidth
     * @param user The user to be transfered the output
     * @return output The output amount transfered to user
     */
    function swapFromPool(uint256 amount, address user) external returns (uint256 output);

    /* /////////////////////////////////////////////
                    ERRORS
    ////////////////////////////////////////////*/

    /// @notice Throw when trying to re-add pool or adding itself
    error InvalidPool();

    /// @notice Throw when trying to add a destination that is not a Ulysses LP
    error NotUlyssesLP();

    /// @notice Throw when fee would overflow
    error FeeError();

    /// @notice Throw when input amount is too small
    error AmountTooSmall();

    /// @notice Throw when weight is 0 or exceeds MAX_TOTAL_WEIGHT
    error InvalidWeight();

    /// @notice Throw when settng an invalid fee
    error InvalidFee();

    /// @notice Throw when weight is 0 or exceeds MAX_TOTAL_WEIGHT
    error TooManyDestinations();

    /// @notice Throw when adding/removing LPs before adding any destinations
    error NotInitialized();

    /// @notice Thrown when muldiv fails due to multiplication overflow
    error MulDivFailed();

    /// @notice Thrown when addition overflows
    error Overflow();

    /// @notice Thrown when subtraction underflows
    error Underflow();

    /*//////////////////////////////////////////////////////////////
                                 EVENTS
    //////////////////////////////////////////////////////////////*/

    /**
     * @notice Emitted when a user swaps from this Ulysses LP's underlying to the destination Ulysses LP's underlying
     * @param caller The caller of the swap
     * @param poolId The ID of the destination Ulysses LP
     * @param assets The amount of underlying deposited in this Ulysses LP
     */
    event Swap(address indexed caller, uint256 indexed poolId, uint256 assets);
}
